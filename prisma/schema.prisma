// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @map("_id")
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role String?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model BlogCategory {
  id          String   @id  @map("_id")
  name        String
  slug        String   @unique
  description String?
  bannerImage Json?    // { public_id: string, url: string, alt: string }
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  blogs Blog[]

  @@map("blog-category")
}

model Blog {
  id             String       @id  @map("_id")
  title          String
  h1             String?
  metaTitle      String?
  metaDescription String?
  metaKeywords   String[]
  excerpt        String?
  description    String       // Rich text content
  slug           String       @unique
  status         BlogStatus   @default(DRAFT)

  // Images
  blogImage      Json?        // { public_id: string, url: string, alt: string }
  bannerImage    Json?        // { public_id: string, url: string, alt: string }
  imageAltText   String?

  // Relations
  categoryId     String
  category       BlogCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Tags
  tags           String[]

  // Timestamps
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("blog")
}

enum BlogStatus {
  DRAFT
  PUBLISHED
}
